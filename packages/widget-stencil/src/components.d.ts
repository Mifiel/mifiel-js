/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MifielWidget {
        /**
          * Set classes to the iframe container
         */
        "containerClass"?: string;
        /**
          * The environment to use for the widget.
          * @default 'production'
         */
        "environment": keyof typeof environments;
        /**
          * Function to be executed when the main button is clicked in the error page. It can also be a string containing a URL to redirect to.
         */
        "errorBtnAction"?: string | Function;
        "getIframe": () => Promise<HTMLIFrameElement>;
        /**
          * The widget ID.
         */
        "id": string;
        /**
          * Function that will be called whenever an error occurs during the signing flow.
         */
        "onSignError"?: Function;
        /**
          * Function will be called when the document is signed successfully.
         */
        "onSignSuccess"?: Function;
        /**
          * Function to be executed when the main button is clicked on the success page. It can also be a string containing a URL to redirect to.
         */
        "successBtnAction"?: string | Function;
        /**
          * The text of the success button.
          * @default 'Proceed to next step'
         */
        "successBtnText": string;
        /**
          * Set widget version
         */
        "widgetVersion"?: string;
    }
}
export interface MifielWidgetCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMifielWidgetElement;
}
declare global {
    interface HTMLMifielWidgetElementEventMap {
        "signError": any;
        "signSuccess": any;
    }
    interface HTMLMifielWidgetElement extends Components.MifielWidget, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMifielWidgetElementEventMap>(type: K, listener: (this: HTMLMifielWidgetElement, ev: MifielWidgetCustomEvent<HTMLMifielWidgetElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMifielWidgetElementEventMap>(type: K, listener: (this: HTMLMifielWidgetElement, ev: MifielWidgetCustomEvent<HTMLMifielWidgetElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMifielWidgetElement: {
        prototype: HTMLMifielWidgetElement;
        new (): HTMLMifielWidgetElement;
    };
    interface HTMLElementTagNameMap {
        "mifiel-widget": HTMLMifielWidgetElement;
    }
}
declare namespace LocalJSX {
    interface MifielWidget {
        /**
          * Set classes to the iframe container
         */
        "containerClass"?: string;
        /**
          * The environment to use for the widget.
          * @default 'production'
         */
        "environment"?: keyof typeof environments;
        /**
          * Function to be executed when the main button is clicked in the error page. It can also be a string containing a URL to redirect to.
         */
        "errorBtnAction"?: string | Function;
        /**
          * The widget ID.
         */
        "id"?: string;
        /**
          * Function that will be called whenever an error occurs during the signing flow.
         */
        "onSignError"?: Function;
        "onSignError"?: (event: MifielWidgetCustomEvent<any>) => void;
        /**
          * Function will be called when the document is signed successfully.
         */
        "onSignSuccess"?: Function;
        "onSignSuccess"?: (event: MifielWidgetCustomEvent<any>) => void;
        /**
          * Function to be executed when the main button is clicked on the success page. It can also be a string containing a URL to redirect to.
         */
        "successBtnAction"?: string | Function;
        /**
          * The text of the success button.
          * @default 'Proceed to next step'
         */
        "successBtnText"?: string;
        /**
          * Set widget version
         */
        "widgetVersion"?: string;
    }
    interface IntrinsicElements {
        "mifiel-widget": MifielWidget;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "mifiel-widget": LocalJSX.MifielWidget & JSXBase.HTMLAttributes<HTMLMifielWidgetElement>;
        }
    }
}
